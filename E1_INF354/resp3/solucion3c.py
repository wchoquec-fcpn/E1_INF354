# 3.c) algoritmos de preprocesamiento Normalizer
from sklearn.preprocessing import Normalizer
X = [
 [93.8,25.68,91.84,16.6,89.84,99.6,1.84,74.2,3]
,[91.64,25.104,91.552,15.88,89.552,98.88,1.552,72.76,3]
,[60,20,96,10,95,85,7,60,1]
,[85.76,23.536,90.768,13.92,88.768,96.92,0.768,68.84,3]
,[48.12,17.248,97.872,6.496,96.248,72.48,8.248,53.12,0]
,[56.88,19.376,95.376,9.376,94.064,83.44,6.376,58.44,1]
,[47,16.8,97.2,5.6,95.8,68,7.8,52,0]
,[50,18,99,8,97,80,9,55,0]
,[45.28,16.112,96.168,4.224,95.112,61.12,7.112,50.28,0]

]
transformer = Normalizer().fit(X)  # fit does nothing.
print(transformer)
print(transformer.transform(X))

# =============================================================================
# [[0.45946477 0.1257895  0.44986402 0.08131253 0.44006733 0.48787518
#   0.00901296 0.36345721 0.01469504]
#  [0.45388431 0.12433775 0.45344845 0.07865215 0.44354264 0.48974335
#   0.00768691 0.36037344 0.01485872]
#  [0.32921346 0.10973782 0.52674154 0.05486891 0.52125465 0.46638574
#   0.03840824 0.32921346 0.00548689]
#  [0.43785261 0.1201644  0.46342124 0.07106936 0.45321013 0.49483063
#   0.00392107 0.35146658 0.01531667]
#  [0.27949857 0.1001827  0.56847639 0.03773115 0.5590436  0.42099036
#   0.0479074  0.3085404  0.        ]
#  [0.31765924 0.10820966 0.53264888 0.0523624  0.52532171 0.46598958
#   0.03560822 0.32637142 0.00558473]
#  [0.27822382 0.09945022 0.57539054 0.03315007 0.56710302 0.40253659
#   0.04617331 0.3078221  0.        ]
#  [0.28125417 0.1012515  0.55688327 0.04500067 0.5456331  0.45000668
#   0.05062575 0.30937959 0.        ]
#  [0.27588937 0.09816982 0.58594808 0.02573668 0.57951391 0.37240191
#   0.04333315 0.30635419 0.        ]]
# =============================================================================
